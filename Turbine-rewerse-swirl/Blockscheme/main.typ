#import "@preview/fletcher:0.5.8" as fletcher: diagram, node, edge
#import fletcher.shapes: pill, parallelogram, diamond, hexagon, brace

#set text(size:14pt)
#set page(numbering: "1")

#align(right)[Дмитриев А.К., 07.06.2025 ]

= Блок-схема алгоритма вычислений
#set text(size:11pt)

\

#figure(
diagram(
  node-stroke: 1pt,
  // debug: true,

  node((0,1), corner-radius: 10pt, [
    Исходные данные $ [C] $ 
  ]),
  edge("=="),

  node((0,2), shape: parallelogram.with(angle: 30deg), name: <P2>, [
    $"задаем "[p_2], [phi], [psi] $
  ]),
  edge("=="),
  
  node((0,3), name:<I>, [
    *Первичный расчет* \
    #diagram($ (G_"опт", [C]) edge(->, text(#0.8em, f_"пер")) & [I] $)
  ] ),
  edge(<P2>,<I>,"=="),
  edge("=="),

  // node((0,3), [
  //   *Вычисление параметров для расчета по ступеням* \ 
  //   #diagram($ ([C], [I], [p_2], [phi], [psi]) edge(->, text(#0.8em, f_"пар")) & [P] $)
  // ]),
  // edge("=="),

  node((0,4), name: <S>, [
    *Расчет по ступеням* \
    #diagram($ (G_"опт", [C], [I], [p_2], [phi], [psi]) edge(->, text(#0.8em, f_"ступ")) & [S] $)
  ]),
  edge("=="),

  node((0,5), shape: parallelogram.with(angle: 30deg), name: <F>, [
    $"задаем " alpha_1 "и " beta_2^* $
  ]),
  edge("=="),

  node((0,6), name: <RR>, [
    *Расчет обратной закрутки* \
    #diagram($ (G_"опт", [C], [I], [S], F, rho_k, alpha_1, beta_2^*) edge(->, text(#0.8em, f_"зак")) & [R] $)
  ]),
  edge("=="),

  node((0,7), corner-radius: 10pt, [
    Проверка конфузорности РК \
    Профилирование сопловой лопатки \
    Проверка конфузоности СА
  ]),

  node((1,5), name: <FF>, [
    Для $F_i in [-0.5,0] $ и $rho_(k i) in [0.2, 0.5] $:

    Расчет обратной закрутки

    #diagram($ (G_"опт", [I], [S], [C], F_i, rho_(k i)) edge(->, text(#0.8em, f_"зак")) & [R]_i $)
  ]),
  edge(),
  node((1,6), [
    $ [ [R]_i ] <- [R]_i: [R]_i.p_2 arrow.tr arrow.tr $
  ]),
  edge(),
  node((1,7), shape: hexagon, 
  // fill: gradient.linear(green,white, red), 
  name: <CC>, [
    Выбираем "хорошие" $f$ и $rho_k$ \ 
    $ [ [R]_i ] <- [R]_i^5 : |alpha_2| >= 86 degree$, $|Delta rho_k| <= 0.1$

    Из этой области $[ [R]_i ]$ выбирается \ [R] с наименьшим градиентом
  ]),
  node((1.9,5),[меняем $alpha_1$, $beta_2^*$], shape: parallelogram.with(angle: 30deg), name:<Lub>),
  edge(<CC.west>, (0.5,7),(0.5,6),<RR>, "-|>", [$F, rho_k$]),
  // node(enclose:((1,5),(1,7),(1.9,5)), stroke: teal, inset: 18pt ),
  edge(<F>,<FF>, "-|>"),
  edge(<CC>,(1.9,7),<Lub>, "-|>"),
  edge(<Lub>,<FF>, "-|>"),


  node((1,1), name: <Gi>, [
    Для $G_i in [120 ... 180] $: \
    Первичный расчет \
    #diagram($ (G_i, [C]) edge(->, text(#0.8em, f_"пер")) & [I]_i $)
  ] ),
  edge(),
  // node((1,1), [
  //   Для $G_i in [120 ... 180] $: \
  //   Вычисление параметров для расчета по ступеням \
  //   #diagram($( [C], [I]_i, [p_2], [phi], [psi]) edge(->, text(#0.8em, f_"пар")) & [P]_i $)
  // ]),
  // edge(),
  node((1,2), [
    Для $G_i in [120 ... 180] $: \
    Расчет по ступеням \
    #diagram($ (G_i, [C], [I]_i, [p_2],[phi],[psi]) edge(->, text(#0.8em, f_"ступ")) & [S]_i $ )
  ]),
  edge(),
  node((1,3), [
    $ G_"опт" <- G_i: [S]_i^4.alpha_2 = 90 degree $
  ]),
  edge(),
  node((1,4), name: <rr>, shape: diamond, 
  // fill: gradient.linear(green,red), 
  inset: 4pt, [
    $ ? cases(G_"опт" approx G_"A2GTP" \ Sigma N approx [C].N) $
  ]),
  edge(<P2>,(0.5,2),(0.5,1),<Gi>, "-|>"),
  edge(<rr.west>, (0.5,4), (0.5,3) , <I.east>, "-|>", [$ G_"опт", phi_"опт",psi_"опт" $]),
  edge(<rr>, (1.9,4),<Shu>, "-|>"),
  node((1.9,1), shape: parallelogram.with(angle: 30deg), name: <Shu>, [
    меняем $[phi],[psi]$
  ]),
  edge(<Shu>,<Gi>, "-|>"),
  // node(enclose:((1,1),(1,2),(1,4),(1.8,1)), stroke: red, inset: 10pt ),
),
)

#set text(size:14pt)
// Приводит межстрочное состояние в соответствие с вордом
#let leading = 1.5em - 0.75em
#set block(spacing: leading)
#set par(spacing: leading, leading: leading)

#show figure: set figure.caption(separator: [ --- ])
// #set list(marker: [---])
#set par(
  justify: true,
  first-line-indent:( 
    amount: 1.25cm,
    all:true
  )
)

#set figure(
  supplement: [Рисунок],
  numbering: ("1")
)
#counter(figure.where(kind: image)).update(0)

= Пояснение
== Обозначения

- $a$: параметр
  - Например, $G_"опт" = 250 "кг/с"$;

- $[a]$: коллекция. Эквивалентно одному столбцу в таблице экселя
  - Например, входные данные или все рассчитанные параметры закрутки потока для одного сечения.

- $[a].b$: параметр $b$ из коллекции $[a]$
  - Например, $[C].n$ - частота вращения турбины из исходных данных

- $[a]^c.b$: параметр $b$ из c-той части коллекции $[a]$. Эквивалентно c-тому столбцу из таблицы экселя.
  - Например, $[R]^5.alpha_2$ - угол $alpha_2$ для периферийного (пятого) сечения в расчете закрутки потока

== Поиск оптимальных параметров расчета по ступеням

Для каждых $phi,psi$ существует лишь один расход $G_"опт"$, обеспечивающий осевой выход, что показано на @Pik[графике], полученном в результате варьирования расхода в некотором промежутке. Этот расход должен совпасть с расходом $G_"A2GTP"$, полученном от расчета турбоагрегата, для этого надо варьировать параметры $phi, psi$.

Производится это так: есть "ручка" которую можно двигать по плоскости, её координаты соответствуют параметрам $phi, psi$. Перемещением этой "ручки" надо совместить красную и синюю линии на графике. 

#figure(
  image("Gplot.svg", width:70%),
  caption: [График зависимости $alpha_2$ от $G$ при заданных $phi, psi$]
) <Pik>

== Поиск "хороших" параметров для закрутки потока

Эти значения я называю "хорошими", а не оптимальными, потому что сформулировать критерии оптимальности в этом расчете невозможно. "Хорошим" я считаю случай, когда выход по всем сечениям максимально близок к осевому - предполагается, что это ведёт к максимизации КПД.

Вручную выбираются углы $alpha_1$ и $beta_2^*$, с ними для всех возможных значений $F$ и $rho_k$ производится расчет закрутки потока. По результатам расчета строится скалярное поле рассматриваемых элементов расчета в координатах $F$ и $rho_k$, вырезаются значения, не обеспечивающие монотонное повышение давления по радиусу.

На @Pih[рисунке] представлено такое поле, построенное для угла выхода потока на периферии в абсолютном движении и разницы суммарной полиномиальной и кинематической степени реактивности.

Чем краснее точка на левом графике, тем лучше. Чем зеленее на правом - тем лучше. Получается, "хорошие" точки сконцентрированы в левом верхнем углу допустимой области. 

Все из них подходят, чтобы выбрать одну и обеспечить сохранение декларативности, выбирается точка с наименьшим градиентом, потому что в случае ошибки моделирования или изготовления влияние этой ошибки на анализируемый параметр будет также минимизировано.

#figure(
  image("var.svg", width:100%),
  caption: [Зависимости $alpha_2$ и $Delta rho_k$ от $F$ и $rho_k$ при заданных $alpha_1$ и $beta_2^*$]
) <Pih>

В случае неверного выбора углов $alpha_1$ и $beta_2^*$ поле распределения параметров может выглядеть как на @fig-2025-06-08-02-53-53[рисунке]. Здесь "хороших" точек нет, помимо того, что график имеет нефизический вид.


#figure(
  image("assets/2025-06-08-02-53-53.png", width: 100%),
  caption: [Зависимости $alpha_2$ и $Delta rho_k$ от $F$ и $rho_k$ при неудачных $alpha_1$ и $beta_2^*$],
) <fig-2025-06-08-02-53-53>

\

Помимо угла выхода потока в абсолютных координатах, можно исследовать градиент давления в радиальном направлении: его величину и линейность, можно исследовать угол установки лопатки, степени реактивности.
